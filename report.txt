evalId: eval-okS-2025-08-15T08:38:04
results:
  version: 3
  timestamp: '2025-08-15T08:38:04.552Z'
  prompts:
    - raw: '{{prompt}}'
      label: '{{prompt}}'
      id: effa18501e44aafd9bc42a2f64ffc9b6350f94025520ca2ed382f9bdc4b6e982
      provider: http://127.0.0.1:8000/api/
      metrics:
        score: 0
        testPassCount: 0
        testFailCount: 0
        testErrorCount: 1
        assertPassCount: 0
        assertFailCount: 0
        totalLatencyMs: 12
        tokenUsage:
          prompt: 0
          completion: 0
          cached: 0
          total: 0
          numRequests: 0
          completionDetails:
            reasoning: 0
            acceptedPrediction: 0
            rejectedPrediction: 0
          assertions:
            total: 0
            prompt: 0
            completion: 0
            cached: 0
            numRequests: 0
            completionDetails:
              reasoning: 0
              acceptedPrediction: 0
              rejectedPrediction: 0
        namedScores: {}
        namedScoresCount: {}
        cost: 0
  results:
    - cost: 0
      error: |-
        SyntaxError: "[object Object]" is not valid JSON

        SyntaxError: "[object Object]" is not valid JSON
            at JSON.parse (<anonymous>)
            at eval (eval at getInlineTransformFunction (C:\Users\Admin\AppData\Roaming\npm\node_modules\promptfoo\dist\src\util\transform.js:82:12), <anonymous>:3:13)
            at transform (C:\Users\Admin\AppData\Roaming\npm\node_modules\promptfoo\dist\src\util\transform.js:131:39)
            at async runEval (C:\Users\Admin\AppData\Roaming\npm\node_modules\promptfoo\dist\src\evaluator.js:519:44)
            at async processEvalStep (C:\Users\Admin\AppData\Roaming\npm\node_modules\promptfoo\dist\src\evaluator.js:1003:26)
            at async C:\Users\Admin\AppData\Roaming\npm\node_modules\promptfoo\dist\src\evaluator.js:1283:17
      gradingResult: null
      id: d79d39b1-df67-4e15-a15c-8118113b0624
      latencyMs: 12
      namedScores: {}
      prompt:
        raw: ''
        label: '{{prompt}}'
      promptId: effa18501e44aafd9bc42a2f64ffc9b6350f94025520ca2ed382f9bdc4b6e982
      promptIdx: 0
      provider:
        id: http://127.0.0.1:8000/api/
        label: ''
      score: 0
      success: false
      testCase:
        vars: &ref_0
          question: >-
            Use the undirected network in `edges.csv`.


            Return a JSON object with keys:

            - `edge_count`: number

            - `highest_degree_node`: string

            - `average_degree`: number

            - `density`: number

            - `shortest_path_alice_eve`: number

            - `network_graph`: base64 PNG string under 100kB

            - `degree_histogram`: base64 PNG string under 100kB


            Answer:

            1. How many edges are in the network?

            2. Which node has the highest degree?

            3. What is the average degree of the network?

            4. What is the network density?

            5. What is the length of the shortest path between Alice and Eve?

            6. Draw the network with nodes labelled and edges shown. Encode as
            base64 PNG.

            7. Plot the degree distribution as a bar chart with green bars.
            Encode as base64 PNG.
        assert:
          - type: is-json
            value:
              type: object
              required:
                - edge_count
                - highest_degree_node
                - average_degree
                - density
                - shortest_path_alice_eve
                - network_graph
                - degree_histogram
              properties:
                edge_count:
                  type: number
                highest_degree_node:
                  type: string
                average_degree:
                  type: number
                density:
                  type: number
                shortest_path_alice_eve:
                  type: number
                network_graph:
                  type: string
                degree_histogram:
                  type: string
          - type: python
            weight: 3
            value: |
              if output["edge_count"] == 7 :
                return True
              return False
          - type: python
            weight: 3
            value: |
              if output["highest_degree_node"].lower() == "bob" :
                return True
              return False
          - type: python
            weight: 3
            value: |
              val = float(output["average_degree"])
              if abs(val - 2.8) <= 0.001:
                return True
              return False
          - type: python
            weight: 3
            value: |
              val = float(output["density"])
              if abs(val - 0.7) <= 0.001:
                return True
              return False
          - type: python
            weight: 3
            value: |
              if output["shortest_path_alice_eve"] == 2:
                return True
              return False
          - type: llm-rubric
            weight: 8
            rubricPrompt: |
              [
                {"role":"system","content":"Grade the network graph. Score 1 only if (a) nodes Alice, Bob, Carol, David, Eve are labelled; (b) edges match edges.csv; (c) layout is clear; (d) file size < 100 kB. Respond JSON {nodes:bool,edges:bool,layout:bool,size:bool,score:number}"},
                {"role":"user","content":[
                  {"type":"image_url","image_url":{"url":"data:image/png;base64,{{output["network_graph"]}}"}},
                  {"type":"text","text":"{{vars.question}}"}
                ]}
              ]
            threshold: 0.99
          - type: llm-rubric
            weight: 8
            rubricPrompt: |
              [
                {"role":"system","content":"Grade the degree histogram. Score 1 only if (a) bar chart of node degree counts; (b) bars are green; (c) axes visible and labelled; (d) file size < 100 kB. Respond JSON {bars:bool,color:bool,axes:bool,size:bool,score:number}"},
                {"role":"user","content":[
                  {"type":"image_url","image_url":{"url":"data:image/png;base64,{{output["degree_histogram"]}}"}},
                  {"type":"text","text":"{{vars.question}}"}
                ]}
              ]
            threshold: 0.99
        options:
          provider:
            id: openai:gpt-4.1-nano
          transform: JSON.parse(output)
        metadata: {}
      testIdx: 0
      vars: *ref_0
      metadata: {}
      failureReason: 2
  stats:
    successes: 0
    failures: 0
    errors: 1
    tokenUsage:
      prompt: 0
      completion: 0
      cached: 0
      total: 0
      numRequests: 0
      completionDetails:
        reasoning: 0
        acceptedPrediction: 0
        rejectedPrediction: 0
      assertions:
        total: 0
        prompt: 0
        completion: 0
        cached: 0
        numRequests: 0
        completionDetails:
          reasoning: 0
          acceptedPrediction: 0
          rejectedPrediction: 0
config:
  tags: {}
  description: Sample evaluation â€“ network dataset
  prompts:
    - '{{prompt}}'
  providers:
    - id: http
      config:
        url: http://127.0.0.1:8000/api/
        method: POST
        body:
          question: file://questions.txt
        transformResponse: json
  tests:
    - vars:
        question: file://questions.txt
      assert:
        - type: is-json
          value:
            type: object
            required:
              - edge_count
              - highest_degree_node
              - average_degree
              - density
              - shortest_path_alice_eve
              - network_graph
              - degree_histogram
            properties:
              edge_count:
                type: number
              highest_degree_node:
                type: string
              average_degree:
                type: number
              density:
                type: number
              shortest_path_alice_eve:
                type: number
              network_graph:
                type: string
              degree_histogram:
                type: string
        - type: python
          weight: 3
          value: |
            if output["edge_count"] == 7 :
              return True
            return False
        - type: python
          weight: 3
          value: |
            if output["highest_degree_node"].lower() == "bob" :
              return True
            return False
        - type: python
          weight: 3
          value: |
            val = float(output["average_degree"])
            if abs(val - 2.8) <= 0.001:
              return True
            return False
        - type: python
          weight: 3
          value: |
            val = float(output["density"])
            if abs(val - 0.7) <= 0.001:
              return True
            return False
        - type: python
          weight: 3
          value: |
            if output["shortest_path_alice_eve"] == 2:
              return True
            return False
        - type: llm-rubric
          weight: 8
          rubricPrompt: |
            [
              {"role":"system","content":"Grade the network graph. Score 1 only if (a) nodes Alice, Bob, Carol, David, Eve are labelled; (b) edges match edges.csv; (c) layout is clear; (d) file size < 100 kB. Respond JSON {nodes:bool,edges:bool,layout:bool,size:bool,score:number}"},
              {"role":"user","content":[
                {"type":"image_url","image_url":{"url":"data:image/png;base64,{{output["network_graph"]}}"}},
                {"type":"text","text":"{{vars.question}}"}
              ]}
            ]
          threshold: 0.99
        - type: llm-rubric
          weight: 8
          rubricPrompt: |
            [
              {"role":"system","content":"Grade the degree histogram. Score 1 only if (a) bar chart of node degree counts; (b) bars are green; (c) axes visible and labelled; (d) file size < 100 kB. Respond JSON {bars:bool,color:bool,axes:bool,size:bool,score:number}"},
              {"role":"user","content":[
                {"type":"image_url","image_url":{"url":"data:image/png;base64,{{output["degree_histogram"]}}"}},
                {"type":"text","text":"{{vars.question}}"}
              ]}
            ]
          threshold: 0.99
  scenarios: []
  env: {}
  sharing: true
  defaultTest:
    options:
      provider:
        id: openai:gpt-4.1-nano
      transform: JSON.parse(output)
    vars: {}
    assert: []
    metadata: {}
  outputPath:
    - report.txt
  extensions: []
  metadata: {}
shareableUrl: null
metadata:
  promptfooVersion: 0.117.5
  nodeVersion: v22.16.0
  platform: win32
  arch: arm64
  exportedAt: '2025-08-15T08:38:04.652Z'
  evaluationCreatedAt: '2025-08-15T08:38:04.552Z'
